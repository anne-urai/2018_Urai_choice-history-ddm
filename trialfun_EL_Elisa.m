function [trl, event] = trialfun_EL_Elisa(cfg)% header and events are already in the asc structures% returns a trl that should be identical to the structure obtained from MEG% dataevent   = cfg.event;value   = {event(find(~cellfun(@isempty,strfind({event.value},'trial')))).value};sample  = [event(find(~cellfun(@isempty,strfind({event.value},'trial')))).sample];% find all messages% determine the number of samples before and after the triggerpretrig  = -round(cfg.trialdef.pre  * cfg.fsample);posttrig =  round(cfg.trialdef.post * cfg.fsample);trl = [];session = cfg.session;for j = 1:length(value), % loop through the trials and create the trial matrix on each trl        % check that this is really a fixation trigger    if ~isempty(strfind(value{j}, 'fix')),                % check if the data go that far        if j+3 > length(value),            break        end                % in Elisa's data, fixation trigger was only sent after fix end        % workaround and force the trial to begin 1s before stimulus onset        trlbegin    = sample(j+1) - round(1 * cfg.fsample);        offset      = pretrig;        fixoffset   = sample(j+1) - round(1 * cfg.fsample);                % stimulus start        if ~isempty(strfind(value{j+1}, 'stim_dir')),            stimoffset = sample(j+1);            % find the trial nr and block nr, scan message            scandat =  sscanf(value{j+1}, 'MSG %*f block%d_trial%d_stim_dir%d');            blockcnt = scandat(1); trlcnt = scandat(2);            dir = scandat(3);        end                % response        if ~isempty(strfind(value{j+2}, 'resp')),            respoffset = sample(j+2);            resp = sscanf(value{j+2}, 'MSG %*f block%*d_trial%*d_stimdir%*d_respkey%f_correct%f_RT%f');            respkey = resp(1); respcorrect = resp(2);             respRT = resp(3);        else            error('no respoffset sample found');        end        % feedback        if ~isempty(strfind(value{j+3}, 'feedback')),            feedbackoffset = sample(j+3);            fb = sscanf(value{j+3}, 'MSG %*f block%*d_trial%*d_feedback_correct%f');        else            error('no feedbackoffset sample found');        end                assert(isequaln(fb, respcorrect), 'correctness not decoded properly');                % fieldtrip allows variable trial length        trlend = feedbackoffset + posttrig;                % append all to mimic the MEG's trialinfo        newtrl   = [trlbegin trlend offset fixoffset dir stimoffset respkey respcorrect respRT respoffset fb feedbackoffset trlcnt blockcnt session];        trl      = [trl; newtrl];    endendend