function [trl, event] = trialfun_EL_PeterMurphy(cfg)% header and events are already in the asc structures% returns a trl that should be identical to the structure obtained from MEG% data% load in the MAT file that we need to get behavioural infoload(sprintf('~/Data/PeterMurphy/P%d/%d_%d.mat', cfg.sj, cfg.sj, cfg.block));event   = cfg.event;value   = {event(find(~cellfun(@isempty,strfind({event.value},'BLOCKTIME')))).value};sample  = [event(find(~cellfun(@isempty,strfind({event.value},'BLOCKTIME')))).sample];% find all messages% determine the number of samples before and after the triggerpretrig  = -round(cfg.trialdef.pre  * cfg.fsample);posttrig =  round(cfg.trialdef.post * cfg.fsample);trl = [];for j = 1:length(value), % loop through the trials and create the trial matrix on each trl        % check that this is really a fixation trigger    if ~isempty(strfind(value{j}, 'TRIAL')),                % see which trial we are at        scandat     = sscanf(value{j}, 'MSG %*f TRIAL %d STIMULUS %*d BLOCKTIME %*f');        trialnum    = scandat(1);                trlbegin    = sample(j) + pretrig;        offset      = pretrig;        stimoffset  = sample(j);                try            % response            if ~isempty(strfind(value{j+1}, 'RESPONSE')),                respoffset = sample(j+1);            else                warning('no respoffset sample found');                % skip this trial                continue            end        catch            warning('block finished')            continue;        end                trlend     = sample(j+1) + posttrig;                % append all:        % trlbegin trlend offset stim stimoffset        newtrl   = [trlbegin trlend offset data_block(trialnum, 5) stimoffset ...            data_block(trialnum, 2) data_block(trialnum, 4) respoffset];                % check that we find the same RT        RTmat      = data_block(trialnum, 4);        RTedf      = (respoffset - stimoffset) / cfg.fsample;        assert(abs(RTmat - RTedf) < 0.01, 'RTs do not match');        trl      = [trl; newtrl];    endendif size(trl, 1) ~= 100,    warning('did not create 100 trials');endend